# Personal
alias zs='source ~/.zshrc'
alias upgrade_packages='brew update && brew outdated --cask --greedy && brew upgrade && brew upgrade --cask --greedy && brew cleanup && echo 0 > ~/.config/tmux/custom/brew-outdated && brew cleanup && mise plugins update && mise outdated && mise upgrade && mise prune -y && echo 0 > ~/.config/tmux/custom/mise-outdated'
alias vi='nvim'
alias v='nvim'
alias ls='eza --icons -lah'
alias l='eza --icons -lah'
alias lt='eza --icons --tree --level=2 --long'
alias cat='bat'
alias diff='diff --color=auto'
alias grep='grep --color=auto'
alias g='git'
alias t='tmux'
alias tlu='if [[ -f ".dirrc" ]]; then source .dirrc; elif [[ -f ".dirrc.work" ]]; then source .dirrc.work; fi'
alias tn='tmux display-popup -b rounded -S "bg=#1e1e2e,fg=#b4befe" -w 30% -h 3 -y 1 "printf \" âœ… Task done.\";tput cup 0 0; tput civis"'
alias tcode='tmuxinator start code -n "$(basename $(pwd) | tr "[:upper:]" "[:lower:]")"'
alias ttf='tmuxinator start terraform-multi-env -n "$(basename $(pwd) | tr "[:upper:]" "[:lower:]")"'
alias myip='curl -4 https://ifconfig.co'
alias flushdns='sudo dscacheutil -flushcache sudo killall -HUP mDNSResponder'
alias tf='terraform'
alias r='rails'
alias credentials-edit='rails credentials:edit'
alias credentials-edit-dev='rails credentials:edit --environment development'
alias credentials-edit-test='rails credentials:edit --environment test'
alias credentials-edit-prod='rails credentials:edit --environment production'

function tfpl() {
  if [[ "$1" != "" ]]; then
    ENVIRONMENTS=(development dev staging stage stg qa production prod prd)
    if [[ "''${ENVIRONMENTS[(r)$1]}" == "$1" ]]; then
      export TF_WORKSPACE="$1"
      export TF_VAR_FILE="-var-file=vars.$1.tfvars"
      export TF_EXTRA_ARGS="''${@: (($#-1)),2}"
    else
      export TF_EXTRA_ARGS="''${@: (($#-1)),1}"
    fi
  fi
  terraform plan ''${TF_VAR_FILE} -lock=false ''${TF_EXTRA_ARGS}
  unset TF_WORKSPACE TF_VAR_FILE TF_EXTRA_ARGS
}

function tfap() {
  if [[ "$1" != "" ]]; then
    ENVIRONMENTS=(development dev staging stage stg qa production prod prd)
    if [[ "''${ENVIRONMENTS[(r)$1]}" == "$1" ]]; then
      export TF_WORKSPACE="$1"
      export TF_VAR_FILE="-var-file=vars.$1.tfvars"
      export TF_EXTRA_ARGS="''${@: (($#-1)),2}"
    else
      export TF_EXTRA_ARGS="''${@: (($#-1)),1}"
    fi
  fi
  terraform apply ''${TF_VAR_FILE} ''${TF_EXTRA_ARGS}
  unset TF_WORKSPACE TF_VAR_FILE TF_EXTRA_ARGS
}

function tfde() {
  if [[ "$1" != "" ]]; then
    ENVIRONMENTS=(development dev staging stage stg qa production prod prd)
    if [[ "''${ENVIRONMENTS[(r)$1]}" == "$1" ]]; then
      export TF_WORKSPACE="$1"
      export TF_VAR_FILE="-var-file=vars.$1.tfvars"
      export TF_EXTRA_ARGS="''${@: (($#-1)),2}"
    else
      export TF_EXTRA_ARGS="''${@: (($#-1)),1}"
    fi
  fi
  terraform destroy ''${TF_VAR_FILE} ''${TF_EXTRA_ARGS}
  unset TF_WORKSPACE TF_VAR_FILE TF_EXTRA_ARGS
}

# Work
alias gha_watch='test -d .git && while true do GHA_RUN_ID=$(gh run list --user rmgpinto --commit $(git rev-parse HEAD) --json databaseId | jq -r ".[0].databaseId") gh run watch $GHA_RUN_ID if [ "$?" -ne 0 ] then gh run view $GHA_RUN_ID --log fi while true do GHA_NEXT_RUN_ID=$(gh run list --user rmgpinto --commit $(git rev-parse HEAD) --json databaseId | jq -r ".[0].databaseId") if [ "$GHA_RUN_ID" -eq "$GHA_NEXT_RUN_ID" ] then sleep 10 else break fi done done'
alias halstg='NODE_ENV=staging hal'
alias k='kubectl'
alias k8s='cd ~/dev/work/k8s'

